https://vk.com/fave?z=video-101965347_456251314%2F13032c05a286fb5121%2Fpl_post_-101965347_70224

-глянуь про .htaccess
-регулярные выражения
-абстрактные классы

app-папка приложения
    -controllers
    -models
    -views
public (web,webroot)-точка входа ,все запросы перенапрвляться в ету папку.
Картинки,скирпты.стили,шрифты и тд
    -js
    -css
    -images
vendor-ядро и доп.библиотеки
    -core
    -libs
.htaccess -все запросы должны перенаправляться в public/index.php

RewriteRule ^(.*)$ /public/$1
^(.*)$ - все запросы и перенаправить в /public/$1
(.*) - все запросы будут находиться в $1
Папка public .htaccess
    RewriteCond %{REQUEST_FILENAME} !-f   -если не файл
    RewriteCond %{REQUEST_FILENAME} !-d   -если ето не папка

    RewriteRule (.*) index.php?$1 [L,QSA]
    [QSA]- не перезаписовать строку запросса а добавлять уже имеющемся.передаються гет параметром

Написание маршрутизатора Router:
vendor/core
     -Router.php
Все методы будут статичными,нету смысла создавать обьекты етого класса
Метод add - Будет принимать (регулярное выражение,маршрут)
Метод будет заполнять $routes

Method matchRoute - ишет совпадание с таблицей маршрутов и запись в $route if true;

Регулярные выражения:
'^$' -пустая строка
^ - начало строки
$ - конец строки
'[a-z-]+/' - 1 или более символов латиницей и "/"
([a-z-]+)/([a-z-]+) -подмаски
(?P<controller>[a-z-]+)/(?P<action>[a-z-]+)- создаёт помимо стандартных ключей еще и именование ключи
^(?P<controller>[a-z-]+)/(?P<action>[a-z-]+)$ - начало и конец

Нашли в таблице маршрутов ?- создаем обьект(контроллер)если он есть и вызвать метод если присутствует

метод dispatch -

Под каждый контроллер - папку для views


Виды и шаблоны:(урок 4)
базовый класс Вида 3 свойства:
     маршрут -нужен будет(контроллер\екшен)-папка\вид;
     layouts - шаблон (шапка || футер )
     view - текущий вид
        если не передали то шаблон по умолчанию
и Методы:
     конструктор - который будет заполнять свойства
     рендер - подключать шаблон
В Базовом классе Controller присвоить свойству в методе __construct
view(action)
Создать метод getView - создает обьект View-передает данные и вызывать метод Render обьекта View
В Router вызываем метод getView

23min
Перед видом должен подключаться какой-то шаблон,поетому мы будет делать буферизацию
ob_start() -складывает все в буфер обмена,не выводя на екран
$content = ob_get_clean() - очищает буфер обмена и помещает все что находиться в буфере

Как поменять шаблон для нужного контроллера или для екшена?
-можно передать в обьект класса нужный шаблон:
       $this->layouts='Main';
       $this->view='test';
-или переопределить свойства класса
        public $layouts
        public $view

layouts - шаблон (шапка || футер )
view - текущий вид

36min
как не подключать шаблон()для аякса:
-сделать флаг в контроллер
        - $this->layouts=false;
а во классе вьюхе проверять его
        -if($layouts===false){
                     $this->layouts=false;
                 }
торжественное чтоб строгое сравнение было(не попадало NULL)

43мин
Передача переменных в вид?
    -создать свойство в базовом контроллер для хранение данных $data;
       и метод,который будет получать данные з свойства
    -в классе потомке создать метод получение данных (с модели)
       и записи данных в свойство через базовый метод родителя
    - В метод render передача данных

compact($переменные)
extract(array)=переменные будут ключами

Модель и работа с БД. Часть 1. Урок 5
Чтоб не путаться классы контроллеров добавляем постфикс,к примеру "Controller"
    -Нужно файл для хранение настроек,папка config
    -Класс для работы с бд в папке Core:
       -реализуем шаблон одиночки(Singleton)
       -создаеться защищенное свойство
       - создаеться зашищенный конструктор
       -и публичный статический метод,который будет проверять,
       создан ли обьект класса,если не создан-будет создавать и возвращать,
       если создан будет возвращать
  Метод который,будет делать возвращать результат:
      public function execute($sql){
             $stmt = $this->pdo->prepare($sql);
             return $stmt->execute();
         }
prepare -готовить запрос и execute-данные не надо,просто true or false
  Второй метод,будет делать выборку типо select:
    public function query($sql){
            $stmt = $this->pdo->prepare($sql);
            $res = $stmt->execute();
            if($res !==false){
                return $stmt->fetchAll();
            }
         }

Для модели:
    -потребуеться свойство,котоое будет хранить подключение к бд
    -и свойства которое будет храниться имя таблицы
в конструкторе создаем обьект дб
    1,2 method:
    - обверки

-----------До 28 мин ------------






